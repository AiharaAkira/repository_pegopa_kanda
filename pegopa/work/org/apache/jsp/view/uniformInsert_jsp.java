/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2023-06-27 05:18:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uniformInsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ユニフォーム情報登録</title>\r\n");
      out.write("\t<header style=\" width:900px; display: flex; justify-content: center; align-items: center; margin: 0 auto;\">\r\n");
      out.write("\t\t\t<img src=\"https://postfiles.pstatic.net/MjAyMzA2MjdfMjcy/MDAxNjg3ODMxMTk3NzMx.y2U6FThvXwdOi9XToRwE2N4H_hRXqdkBoCeK2m9852Mg.qxG3IdUM9aHf2hR4frt1B7kkSVwn5eb_OthgeJAIE04g.PNG.hyh3700/logo.png?type=w773\" alt=\"logo\" width=\"70\" height=\"70\">\r\n");
      out.write("\t\t\t\t<h1 style=\"padding-top:20px; margin-left: 12px;\">株式会社神田ユニフォーム</h1>\r\n");
      out.write("\t\t\t\t<h1 style=\"padding-top:20px;\"></h1>\r\n");
      out.write("\t\t</header>\r\n");
      out.write("</head>\r\n");
      out.write("\t<table align=\"left\" style=\"padding-bottom:5px; padding-left:10%;\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td align=\"center\"><a href=\"menu.jsp\" style=\"text-decoration:none;\">【メニュー】</a></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<hr width=\"90%\"></hr>\r\n");
      out.write("\t\t<h2 style=\"padding-top:20px; text-align: center;\">商品情報登録</h2>\r\n");
      out.write("\r\n");
      out.write("\t<form style=\"margin-top: 20px;\" action = \"");
      out.print(request.getContextPath());
      out.write("/uniformInsert\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return call();\">\r\n");
      out.write("\t\t<table style=\"margin: 0 auto; border-spacing: 8px;\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th bgcolor=\"#66CC99\" width=\"130\">商品名</th>\r\n");
      out.write("\t\t\t\t<td><input id=\"name\" type=text name=\"name\"></input></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th bgcolor=\"#66CC99\" width=\"130\">画像</th>\r\n");
      out.write("\t\t\t\t<td><input id=\"file\" type=file size=\"25\" name=\"img\"></input></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th bgcolor=\"#66CC99\" width=\"130\">単価</th>\r\n");
      out.write("\t\t\t\t<td><input id=\"price\" type=text name=\"price\"></input></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th bgcolor=\"#66CC99\" width=\"130\">在庫数</th>\r\n");
      out.write("\t\t\t\t<td><input id=\"stock\" type=\"text\" name=\"stock\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=2 style=\"text-align: center;\"><input style=\" margin-top: 30px;  background: none; border-radius: 4px; border: 1px solid; padding: 2px 6px;\" type=\"submit\" value=\"登録\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\tfunction isEmpty(input) {\r\n");
      out.write("\r\n");
      out.write("\t\treturn !input.value; //값이 없어서 거짓.\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// <input>이랑 글자 수를 넣으면 그 글자수 보다 적으면 참, 아니면 거짓\r\n");
      out.write("\r\n");
      out.write("\tfunction lessThan(input, length) {\r\n");
      out.write("\r\n");
      out.write("\t\treturn input.value.length < length;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction moreThan(input, length) {\r\n");
      out.write("\t\treturn input.value.length > length;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//인풋을 넣으면\r\n");
      out.write("\t//한글/특수문자 들어있으면 참, 아니면 거짓\r\n");
      out.write("\r\n");
      out.write("\tfunction containKr(input) {\r\n");
      out.write("\t\t// 엠지\r\n");
      out.write("\t\t//input.value = 'q지';\r\n");
      out.write("\r\n");
      out.write("\t\tlet ok = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890@._/\";\r\n");
      out.write("\r\n");
      out.write("\t\tfor (let i = 0; i < input.value.length; i++) {\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (ok.indexOf(input.value[i]) == -1) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//input 데이터 2개 넣으면 내용이 다르면 true 아니면 false\r\n");
      out.write("\tfunction equalData(input1, input2) {\r\n");
      out.write("\t\treturn !(input1.value == input2.value)\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//<input> 문자열 세트\r\n");
      out.write("\t// 그 문자열 세트가 포함 안되었으면 true\r\n");
      out.write("\t// 들어있으면 false\r\n");
      out.write("\r\n");
      out.write("\tfunction notContains(input, set) {\r\n");
      out.write("\t\t//input : 1qwerASD\r\n");
      out.write("\t\t// set: 1234567890 숫자를 반드시 포함\r\n");
      out.write("\r\n");
      out.write("\t\tfor (let i = 0; i < set.length; i++) {\r\n");
      out.write("\t\t\tif (input.value.indexOf(set[i]) != -1)\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//체크박스 체크여부\r\n");
      out.write("\tfunction notCheck(input) {\r\n");
      out.write("\t\tif (input.checked) {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//<input>을 넣어서\r\n");
      out.write("\t// 숫자가 아니면 true, 숫자면 false\r\n");
      out.write("\tfunction isNotNumber(input) {\r\n");
      out.write("\t\treturn isNaN(input.value);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//xxx(photoInput, \"jpg\")\r\n");
      out.write("\t//그게 아니면 true, 아니면 false\r\n");
      out.write("\tfunction isNotType(input, type) {\r\n");
      out.write("\t\ttype = \".\" + type; //.jpg\r\n");
      out.write("\r\n");
      out.write("\t\treturn input.value.indexOf(type) == -1; //input에.jpg가 있나 없나\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//특수문자 체크\r\n");
      out.write("\t//if(pattern_spc.test(str))\r\n");
      out.write("\tvar pattern_spc = /[~!@#$%^&*()_+|<>?:{}]/; // 특수문자\r\n");
      out.write("\r\n");
      out.write("\t//실제로쓸때 input.value <<이렇게 써야됨\r\n");
      out.write("\t// 한글 체크\r\n");
      out.write("\tfunction checkKor(str) {\r\n");
      out.write("\t\tconst regExp = /[ㄱ-ㅎㅏ-ㅣ가-힣]/g;\r\n");
      out.write("\t\tif (regExp.test(str)) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 숫자 체크\r\n");
      out.write("\tfunction checkNum(str) {\r\n");
      out.write("\t\tconst regExp = /[0-9]/g;\r\n");
      out.write("\t\tif (regExp.test(str)) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 영문(영어) 체크\r\n");
      out.write("\tfunction checkEng(str) {\r\n");
      out.write("\t\tconst regExp = /[a-zA-Z]/g;\r\n");
      out.write("\t\t// 영어\r\n");
      out.write("\t\tif (regExp.test(str)) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 영문+숫자만 입력 체크\r\n");
      out.write("\tfunction checkEngNum(str) {\r\n");
      out.write("\t\tconst regExp = /[a-zA-Z0-9]/g;\r\n");
      out.write("\t\tif (regExp.test(str)) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 공백(스페이스 바) 체크\r\n");
      out.write("\tfunction checkSpace(str) {\r\n");
      out.write("\t\tif (str.search(/\\s/) !== -1) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t\t// 스페이스가 있는 경우\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false; // 스페이스 없는 경우\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//아이디 체크\r\n");
      out.write("\tfunction CheckID(uid) {\r\n");
      out.write("\r\n");
      out.write("\t\tif (!/^[a-zA-Z0-9]{8,20}$/.test(uid)) {\r\n");
      out.write("\t\t\talert(\"아이디는 숫자와 영문자 조합으로 8~20자리를 사용해야 합니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tvar chk_num = uid.search(/[0-9]/g);\r\n");
      out.write("\t\tvar chk_eng = uid.search(/[a-z]/ig);\r\n");
      out.write("\r\n");
      out.write("\t\tif (chk_num < 0 || chk_eng < 0) {\r\n");
      out.write("\t\t\talert(\"아이디는 숫자와 영문자를 혼용하여야 합니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (/(\\w)\\1\\1\\1/.test(uid)) {\r\n");
      out.write("\t\t\talert(\"아이디에 같은 문자를 4번 이상 사용하실 수 없습니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//비밀번호체크\r\n");
      out.write("\tfunction CheckPassword(upw) {\r\n");
      out.write("\t\t/*if (!/^[a-zA-Z0-9~!@#$%^&*()_+|<>?:{}]{8,20}$/.test(upw)) {\r\n");
      out.write("\t\t\talert(\"비밀번호는 숫자와 영문자 조합으로 8~20자리를 사용해야 합니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}*/\r\n");
      out.write("\t\tvar chk_num = upw.search(/[0-9]/g);\r\n");
      out.write("\t\tvar chk_eng = upw.search(/[a-z]/ig);\r\n");
      out.write("\t\tvar chk_special = upw\r\n");
      out.write("\t\t\t\t.search(/(?=.*[a-zA-ZS])(?=.*?[#?!@$%^&*-]).{8,20}/);\r\n");
      out.write("\t\tif (chk_num < 0 || chk_eng < 0 || chk_special < 0) {\r\n");
      out.write("\t\t\talert(\"비밀번호는 숫자와 특수문자+영문자를 혼용하여야 합니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (/(\\w)\\1\\1\\1/.test(upw)) {\r\n");
      out.write("\t\t\talert(\"비밀번호에 같은 문자를 4번 이상 사용하실 수 없습니다.\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//윗값과 같은지 확인\r\n");
      out.write("\tfunction equalCheck(input1, input2) {\r\n");
      out.write("\t\tif (input1.value != input2.value) {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tlet name = document.getElementById('name');\r\n");
      out.write("\tlet price = document.getElementById('price');\r\n");
      out.write("\tlet stock = document.getElementById('stock');\r\n");
      out.write("\tlet file = document.getElementById('file');\r\n");
      out.write("\r\n");
      out.write("\tfunction call() {\r\n");
      out.write("\r\n");
      out.write("\t\tif (isEmpty(name)) {\r\n");
      out.write("\t\t\talert(\"商品名を入力してください。\");\r\n");
      out.write("\t\t\tname.value = \"\";\r\n");
      out.write("\t\t\tname.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif (isEmpty(price)) {\r\n");
      out.write("\t\t\talert(\"価格を入力してください。\");\r\n");
      out.write("\t\t\tprice.value = \"\";\r\n");
      out.write("\t\t\tprice.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif (isEmpty(stock)) {\r\n");
      out.write("\t\t\talert(\"在庫数を入力してください。\");\r\n");
      out.write("\t\t\tstock.value = \"\";\r\n");
      out.write("\t\t\tstock.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif (isNotNumber(price)){\r\n");
      out.write("\t\t\talert(\"数字を入力してください。\");\r\n");
      out.write("\t\t\tprice.value = \"\";\r\n");
      out.write("\t\t\tprice.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif (isNotNumber(stock)){\r\n");
      out.write("\t\t\talert(\"数字を入力してください。\");\r\n");
      out.write("\t\t\tstock.value = \"\";\r\n");
      out.write("\t\t\tstock.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tif(!isEmpty(file)){\r\n");
      out.write("\t\t\tif(isNotType(file, \"jpg\")&&isNotType(file, \"png\")){\r\n");
      out.write("\t\t\t\talert(\"ファイルの拡張子を確認してください。\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tif (cnt == 1) {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
